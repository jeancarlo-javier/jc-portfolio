---
interface Work {
  alt: string
  src: string
  title: string
  description: string
}

const works: Array<Work> = [
  {
    alt: 'Idxboost CMS',
    src: '/works/idxboost-cms.webp',
    title: 'Idxboost CMS',
    description:
      'Led the development of the CMS Website Builder using React and Redux. Collaborated with the Backend team using Symfony to integrate frontend solutions in a WordPress environment.'
  },
  {
    alt: 'Guarnic Overview',
    src: '/works/guarnic-overview-mockup.webp',
    title: 'Guarnic Overview',
    description:
      'Designed and developed user-experience-centered interfaces for security applications. Implemented reusable components and optimized product usability. Frontend Developer'
  },
  {
    alt: 'Taskfive App',
    src: '/works/taskfive-app.webp',
    title: 'TaskFive Landing Page',
    description:
      "I spearheaded the design and development of TaskFive's Landing Page, crafting an engaging and functional interface tailored for task management. The page was optimized for SEO and ensured compatibility across multiple devices."
  },
  {
    alt: 'Traveling Dashboard',
    src: '/works/dashboard-traveling-peru.webp',
    title: 'Traveling Dashboard',
    description:
      'Created dynamic user interfaces with React, Redux, and Firebase. Developed the platform dashboard, improving real-time data interaction and management.'
  }
]
---

<section class="scroll-mt-28" id="work">
  <div class="px-8 md:px-12 pb-24 max-w-2xl mx-auto">
    <h2 class="text-2xl tracking-tighter mb-10 font-light lg:text-4xl text-black">My work.</h2>

    <div
      class="flex flex-col w-full"
      x-data="{
        skip: 1,
        atBeginning: false,
        atEnd: false,
        next() {
            this.to((current, offset) => current + (offset * this.skip))
        },
        prev() {
            this.to((current, offset) => current - (offset * this.skip))
        },
        to(strategy) {
            let slider = this.$refs.slider
            let current = slider.scrollLeft
            let offset = slider.firstElementChild.getBoundingClientRect().width
            slider.scrollTo({ left: strategy(current, offset), behavior: 'smooth' })
        },
        focusableWhenVisible: {
            'x-intersect:enter'() {
                this.$el.removeAttribute('tabindex')
            },
            'x-intersect:leave'() {
                this.$el.setAttribute('tabindex', '-1')
            },
        },
        disableNextAndPreviousButtons: {
            'x-intersect:enter.threshold.05'() {
                let slideEls = this.$el.parentElement.children
                // If this is the first slide.
                if (slideEls[0] === this.$el) {
                    this.atBeginning = true
                // If this is the last slide.
                } else if (slideEls[slideEls.length-1] === this.$el) {
                    this.atEnd = true
                }
            },
            'x-intersect:leave.threshold.05'() {
                let slideEls = this.$el.parentElement.children
                // If this is the first slide.
                if (slideEls[0] === this.$el) {
                    this.atBeginning = false
                // If this is the last slide.
                } else if (slideEls[slideEls.length-1] === this.$el) {
                    this.atEnd = false
                }
            },
        },
    }"
    >
      <div
        class="flex flex-col w-full bg-white rounded-3xl pt-0 relative overflow-hidden"
        aria-labelledby="carousel-label"
        role="region"
        tabindex="0"
        x-on:keydown.left="prev"
        x-on:keydown.right="next"
      >
        <h2 class="sr-only" hidden="" id="carousel-label">Carousel</h2><span
          class="sr-only"
          hidden=""
          id="carousel-content-label">Carousel</span
        >
        <div
          class="items-center justify-between w-full inline-flex mx-auto space-x-2 absolute h-[350px] p-4 pointer-events-none"
        >
          <button
            class="bg-zinc-200 hover:bg-zinc-200 focus:bg-zinc-50 rounded-lg inline-flex items-center text-center text-black p-2 ring-1 ring-zinc-300 pointer-events-auto"
            :class="{ 'opacity-50 cursor-not-allowed': atBeginning }"
            :aria-disabled="atBeginning"
            :tabindex="atEnd ? -1 : 0"
            x-on:click="prev"
            tabindex="0"
            ><span aria-hidden="true"
              ><svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-3 w-3"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                stroke-width="2"
                ><path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7"></path>
              </svg>
            </span><span class="sr-only">Skip to previous slide page</span></button
          >
          <button
            class="bg-zinc-200 hover:bg-zinc-200 focus:bg-zinc-50 rounded-lg inline-flex items-center text-center text-black p-2 ring-1 ring-zinc-300 pointer-events-auto"
            :class="{ 'opacity-50 cursor-not-allowed': atEnd }"
            :aria-disabled="atEnd"
            :tabindex="atEnd ? -1 : 0"
            x-on:click="next"
            tabindex="0"
            ><span aria-hidden="true"
              ><svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-3 w-3 text-zinc-600 hover:text-white"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                stroke-width="2"
                ><path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7"></path>
              </svg>
            </span><span class="sr-only">Skip to next slide page</span></button
          >
        </div>

        <div
          class="flex gap-3 overflow-x-scroll scrollbar-hide snap-mandatory snap-x w-full"
          role="listbox"
          aria-labelledby="carousel-content-label"
          tabindex="0"
          x-ref="slider"
        >
          {
            works.map(({ src, alt, title, description }) => (
              <div
                class=" justify-center w-full flex flex-col shrink-0 snap-start"
                role="option"
                x-bind="disableNextAndPreviousButtons"
              >
                <img class="max-h-[350px] object-cover" src={src} alt={alt} />
                <div class="px-5 py-4">
                  <span class="text-md font-bold">{title}</span>
                  <p class="mt-2 text-sm text-zinc-600">{description}</p>
                </div>
              </div>
            ))
          }
          <!-- <div
            class="items-center justify-center w-full flex flex-col
          shrink-0 snap-start"
            role="option"
            x-bind="disableNextAndPreviousButtons"
          >
            <img src="/wb.png" alt="" />
          </div>
           <div
            class="items-center justify-center w-full flex flex-col
          shrink-0 snap-start"
            role="option"
            x-bind="disableNextAndPreviousButtons"
          >
            <img src="/wb.png" alt="" />
          </div> -->
        </div>
      </div>
    </div>
  </div>
</section>
